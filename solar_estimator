#author Sanjay Lakshminarayana on 26th of August 2020.

---------------------------------------------------------------------------------------------------------------------------------------
# user input the location (House number, street, city, country)

location_user_def = input("Enter your value seperated by Commas(,): ") 
print(location_user_def)

---------------------------------------------------------------------------------------------------------------------------------------

#method 1 of converting location into lat,long and alti

#locator = Nominatim(user_agent=”myGeocoder”)  # uses the geocoding service nominatim built on top of openstreetmap data
#location = locator.geocode(location_user_def)

#print("Latitude= {}, Longitude ={}". format(location.Latitude,location.Longitude))

-----------------------------------------------------------------------------------------------------------------------------------------

#****alternately, method 2** we can also use the following , user will also include 

from geopy.extra.rate_limiter import RateLimiter
import math 
# 1 - conveneint function to delay between geocoding calls
geocode = RateLimiter(locator.geocode, min_delay_seconds=1)
# 2- - create location column
df['location'] = df['location_user_def'].apply(geocode)
# 3 - create longitude, latitude and altitude from location column (returns tuple)
df['point'] = df['location'].apply(lambda loc: tuple(loc.point) if loc else None)
# 4 - split point column into latitude, longitude and altitude columns
df[['latitude', 'longitude', 'altitude']] = pd.DataFrame(df['point'].tolist(), index=df.index)


#location visulalization using folium


map1 = folium.Map(
    location=['latitude','longitude'],
    tiles='cartoDB dark_matter',
    zoom_start=12,
)
df.apply(lambda row:folium.CircleMarker(location=[row["latitude"], row["longitude"]]).add_to(map1), axis=1)
map1

-----------------------------------------------------------------------------------------------------------------------------------------------
import numpy as np 
import matlplotlib.pyplot as plt 
from mpl_toolkits.basemap import basemap
import shapefile
import sys



# requesting data from Solargis from particular date to cuurent date 

<ws:dataDeliveryRequest dateFrom="2014-04-28+01:00" dateTo="current_date"   # for the sake of example 
 xmlns="http://geomodel.eu/schema/data/request"
 xmlns:ws="http://geomodel.eu/schema/ws/data"
 xmlns:geo="http://geomodel.eu/schema/common/geo"
 xmlns:pv="http://geomodel.eu/schema/common/pv"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<site id="site1dummy" lat="48.61259" lng="20.827079">
 <geo:terrain elevation="111" azimuth="112" tilt="11"/>
 <geo:horizon>0:5 7.5:3 15:7 22.5:0</geo:horizon>
 <pv:geometry xsi:type="pv:GeometryFixedOneAngle" azimuth="165" tilt="22"/>
 <pv:system installedPower="100" installationType="FREE_STANDING" dateStartup="2011-06-01">
 <pv:module type="CSI">
 <pv:degradation>3</pv:degradation>
 <pv:degradationFirstYear>8</pv:degradationFirstYear>
 <pv:surfaceReflectance>0.13</pv:surfaceReflectance>
 <pv:powerTolerance low="3" high="3"/>
 <pv:nominalOperatingCellTemp>44</pv:nominalOperatingCellTemp>
 <pv:PmaxCoeff>-0.489</pv:PmaxCoeff>
 </pv:module>
 <pv:inverter>
 <pv:efficiency xsi:type="pv:EfficiencyConstant" percent="94"/>
 </pv:inverter>
 <pv:losses>
 <pv:acLosses cables="1" transformer="2.1"/>
 <pv:dcLosses cables="1.2" mismatch="0.65" monthlySnowPollution="4 2 3 4 5 7 8 4 7 4 5 1"/>
 </pv:losses>
 <pv:topology xsi:type="pv:TopologySimple" relativeSpacing="2.5"/>
 </pv:system>
 </site> 
 <processing key="GHI DIF DNI PVOUT" summarization="HOURLY" terrainShading="true">
 <timeZone>GMT+1</timeZone>
 <timestampType>END</timestampType>
 </processing>
</ws:dataDeliveryRequest>

#sf = shapefile.Reader("developable_area_sez.shp")  # idownloaded from https://blmsolar.anl.gov/maps/shapefiles/

# You imported several other modules during the workflow. Rather than run the import statement again for each module, 
#you'll have the script import all the necessary modules with the same function.


def feedRoutine(https://disc.gsfc.nasa.gov/datasets/OMPS_NPP_NMSO2_PCA_L2_2/summary,workGDB)
	pass

	if _name__ =="_main_":
		[https://disc.gsfc.nasa.gov/datasets/OMPS_NPP_NMSO2_PCA_L2_2/summary,workGDB] = sys.argv[1:]
		feedRoutine(https://disc.gsfc.nasa.gov/datasets/OMPS_NPP_NMSO2_PCA_L2_2/summary. workGDB)
#shapes = sf.shapes()


#fields =sf.fields

# get the list of records in the shape file

records = sf.records()
rec = sf.record[2:7]


assert fields == [("ELEVATION", "C", 1, 0), ["AREA", "N", 18, 5],
... ["location", "C", 12, 0], ["TEMPERATURE", "N", 9, 0], ["Reflectance", "N", 10, 1],
... ["thetha", "N", 9, 0]]

# anyway, further to get the parameters to use to calculate energy estimates from shape file














----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# now to integrate the lat, long and altitude and calculate solar properties at this location based on user requirements
# inverter eff is assumed at 95% and further DC System Size	3 kW
#Module Type	Standard
#Array Type	Fixed (roof mount / sensor etc)
#Array Tilt	20°
#Array Azimuth	180°
#System Losses	14.08%
#Inverter Efficiency	96%
#DC to AC Size Ratio   ******************** later

-----------------------------------------------------------------------------------------------
# main parameters from user to be considered by the user


energy_per_day_user = input('Maximum energy requirements or consumption per day in Watts :')
print(energy_per_day_user)

energy_total_area = input('Maximum energy collector area in  Watts or surface area of the solar panel in total :')
print(energy_total_area)
-------------------------------------------------------------------------------------------

#total solar energy incident on the location using GIS Python now .. ... 

# formulas to calculate the various parameters

from math import *
from math import cosine

#E per surface area 

# Calculate airmass = 1/cosine of thetha 

def Atm_Mass(thetha):

	thetha = 
   AM = 1/cosine(thetha)                                     #atmospheric Mass , what is thetha ? 
   print (AM)
return AM

# calculate local solar time, elevation and azimuth angles

#Twelve noon local solar time (LST) is defined as when the sun is highest in the sky. Local time (LT) usually varies from LST
# because of the eccentricity of the Earth's orbit, and because of human adjustments such as time zones and daylight saving.

def Loc_std_T_Merid(GMT)

    delta_GMT = (GMT - Local_time)
	LSTM = 15*delta_GMT
	print(LSTM)
return LSTM
-----------------------------------------------------------
# convert date into days (d)
import datetime
import calendar


def leap_day_counter(yr):
    leap_days = 0
    # since 1582 11 days are missing
    if yr >= 1582:
        leap_days += 11
    for specific_year in range(1, yr):
        if calendar.isleap(specific_year):
            leap_days += 1
    return leap_days


def month_to_day(yr, mth):
    all_days = 0
    for specific_month in range(1, mth+1):
        days_in_month = calendar.monthrange(yr, specific_month)
        all_days += days_in_month[1]
    return all_days


date = datetime.datetime.now()
d = ((date.year * 365) + leap_day_counter(date.year)) + month_to_day(date.year, date.month) + date.day
print(d)




----------------------------------------------------------
# calculate equation of time at that longitude for correction of eccentricity of earth
def Eqn_time(d)
	B_ee = 360/365*(d-81)  #d is no of day of that year 
	EoT = 9.87*sin(2*B_ee) - 7.53*(cos(B_ee)) - 1.5*sin(B_ee)
	print (EoT)
return EoT


#calculate time correction factor

def Time_corr_factor(LTSM)

	TC = 4*(longitude - LSTM) + EoT
	print(TC)

return TC

# calculate finally the Local Solar Time

from datetime import datetime
now = datetime.now()

LT = now.strftime("%H:%M:%S")
print(LT)

def Loc_solar_T(LT,TC)
	LST = LT + (TC/60)
	print(LST)

return LST

# Hour angle, zero deg is noon  (Earth rot 15deg per hour)

	def Declin_angle (d)

		delta_angle = 23.45*math.sin(360/365*(d-81))	
		print (delta_angle)

	return(delta_angle)


	def Hour_angle(LST)

			HRA = 15*(LST -12)
			print(HRA)

	return(HRA)  

 	def elevat_angle(delta_angle,Latitude,HRA)

 		alpha_elev = [math.asin[sin(delta_angle)*sin(Latitude) + cos(delta_angle)
 		... cos(Latitude)cos(HRA)]]

 		print(alpha_elev)
 	return (alpha_elev)

 	def Azimut_ang(delta_angle,Latitude,HRA)

 		Azimuth_ang = math.acos(((sin(delta_angle)*cos(Latitude) - cos(delta_angle)*sin(Latitude)*cos()HRA)) / cos(alpha_elev))
 			print(Azimuth_ang)
 	
 	return(Azimuth_ang)

# measuring the sunshine hour data, used to estimate the available monthly avg solar radiation 




 	def sun_hour_data(H_o, N )

 		a = 0.25 #(average value at any location)
	 	b = 0.50 # avergae value experimentally calculated
	 	H_o = 1.0
	 	N = 1	

 		H - H_o*(a+b*(n/N)) 
 		print(H)
	return(H)

	# ccalculating collection probability

	import numpy as np 
	import matplotlib.pyplot as plt

	# https://www.pveducation.org/pvcdrom/solar-cell-operation/collection-probability
	# get the equation here ! How to Integrate ? 

	----------------
	

	#TOTAL Beam of Radiation received by PV cells is 


# Total radiation received by PV module = direct beam(B) + Diffuse beam(D)

	# direct beam first 

# user input the module tilt

Mod_Beta = input('enter the solar panel module title angle:')
print(Mod_Beta)

	def direct_beam_rad(delta_angle,latitude,Mod_Beta,Azimuth_ang,HRA)

		if DNI>= 1600  

			# this value is dependent on latitude, date of the year so how to extract it from Satellite data ? 

			Beta_direct_beam = DNI*(sin(delta_angle)*sin(latitude)*sin(Mod_Beta)...
				...*cos(Azimuth_ang) + cos(delta_angle)*cos(latitude)*cos(Mod_Beta)*cos(HRA)+...
				...+cos(delta_angle)*sin(latitude)*sin(Mod_Beta)**cos(Azimuth_ang)cos(HRA)+...
				...+cos(delta_angle)*sin(Azimuth_ang)*sin(HRA)*sin(Mod_Beta))

			print (Beta_direct_beam)
		
		else
			print('the direct beam radiation value at your location is not significant enough, sorry and try some other energy source')

	return(Beta_direct_beam)

	def Dee(Mod_Beta,DHI)
		#DHI diffuse horizontal Irradiation is calculated here 
		#  https://www.scielo.br/scielo.php?pid=S1516-89132019000200213&script=sci_arttext
		# this calculates total diffuse radiation 
			if DHI>=0.5

			diffuse_beam_irrad = (DHI*(180 - Mod_Beta)/180)
			print(diffuse_beam_irrad)

			else
				print('try other energy option')

	return(diffuse_beam_irrad)

	def total_rad_PV_Module(diffuse_beam_irrad,Beta_direct_beam)

		Gee_total = diffuse_beam_irrad + Beta_direct_beam
		print(Gee_total)

	return(Gee_total)

	-------------------------------------------------------------------------------------------------	 	







